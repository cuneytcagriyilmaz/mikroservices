spring.application.name=library-service
spring.h2.console.path=/h2-console
spring.h2.console.enabled=true
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.url=jdbc:h2:mem:testdb

spring.datasource.username=sa
spring.datasource.password=123456

spring.jpa.show-sql=true
spring.jpa.database=h2
spring.jpa.hibernate.ddl-auto=create-drop

eureka.instance.prefer-ip-address=true
eureka.client.service-url.default-zone=${EUREKA_URI:http://localhost:8761/eureka}

#server.port = 0
server.port = 8090
eureka.instance.instance-id=${spring.application.name}:${random.value}

spring.zipkin.base-url:http://localhost:9411/zipkin/

spring.profiles.active=default

#vault kullan?lacak
spring.config.import=optional:vault://
#spring cloud'un conf degerleri disable olsun cunku voult bunu halledecek
spring.cloud.config.enabled=false
spring.cloud.vault.enabled=true

#Ortam degiskeninden token'i aliyoruz. Burada da direkt olarak aliyoruz
spring.cloud.vault.uri=http://localhost:8200
spring.cloud.vault.authentication=token
#ortam degiskenine kaydettigimiz icin asagidaki gibi kullanabiliriz. Ancak acik acik da yazilabilir.
#spring.cloud.vault.token=${VAULT_TOKEN}
spring.cloud.vault.token=s.0yprdSKan2jKbcsLKbSOE3yd

#Script engine olarka key value kulland?lmas? icin bunu aktif ediyoruz.
spring.cloud.vault.kv.enabled=true

#degerlerimizin nerede oldugunu gosteriyor. Script managerde'ki.
spring.cloud.vault.kv.default-context=dev

#Degerleri nerede bulacagini veriyoruz
spring.cloud.vault.kv.backend=library-service

#Vaulttaki degeri okumas?n? sagliyoruz
#library-service.book.count=${count}

#Vaulttaki degeri okumasini saglarken default deger veriyoruz. Eger bunu bulamazsa 5 default degerini verecek
library-service.book.count=${count:5}

#Yapilacak conf degisikliklerinde uygulamay? restart etmeye gerek kalmadan actuator'un refresh'ini kullanarak. Bu degeri aktif hale getiriyorz
#Vault'ta da bunu yapabiliriz. Actuator'un refresh endpointini cagirinca deger yenilenecek
#http://localhost:8090/actuator/refresh adresine istek at?nca degisecek
management.endpoints.web.exposure.include=*



#grpc conf
grpc.server.port=9894
#Buradaki book-service alan? Library servis'teki anatasyona verdigimiz ile ayn? olacak. Book Servis'e erisimi aktif et
grpc.client.book-service.enable-keep-alive=true
#Baglantiyi acik tut. Cok fazla istek olan yerlerde bu true olunca cone-nection hep acik olur. Bu yuke de sebep olabilir. Duruma gore degismeli
grpc.client.book-service.keep-alive-without-calls=true
#Loglarda gorebilmek icin plainText.
grpc.client.book-service.negotiation-type=plaintext




